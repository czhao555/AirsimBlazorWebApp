@page "/"
@rendermode InteractiveServer
@inject AirSimClient AirSimClient
@inject ILogger<AirSimDashboard> Logger
@using BlazorAppInterview.Services

<h2>AirSim Drone Dashboard</h2>
@if (!string.IsNullOrEmpty(alertMessage))
{
    <div class="@alertClass">@alertMessage</div>
}
<div style="display: flex; align-items: flex-start; gap: 20px; max-width: 1200px;">
    <div style="position: relative; width: 100%; max-width: 960px; height: 540px;">
        <!-- Drone Camera Feed -->
        <img src="@videoFrame" alt="Drone Camera Feed" style="width: 100%; height: 100%; border-radius: 10px;" />
        <!-- Data Overlay (No Background) -->
        <div style="position: absolute; top: 10px; left: 10px; color: white;
                    font-size: 0.85rem; line-height: 1.2; text-shadow: 1px 1px 2px black;">
            <p><strong>Battery Level:</strong> @batteryData% (Default value. AirSim doesn't provide battery data.)</p>
            <p><strong>GPS:</strong> @gpsData</p>
            <p><strong>Speed:</strong> @speedData</p>
            <p><strong>Drone Status:</strong> @droneStatus</p>
            <p><strong>Status:</strong> @flightStatus</p>
            <p><strong>Collission detection:</strong> @totalCollisions</p>
            <p><strong>Total Flight Time:</strong> @totalFlightTime.ToString(@"hh\:mm\:ss")</p>
        </div>
        <div style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);
                color: white; font-size: 0.75rem; text-shadow: 1px 1px 2px black;">
            Please wait after sending command. AirSim may take a while to precheck after collision.
        </div>
    </div>

    <!-- Fixed Flight Path -->
    <div>
        <h4>Fixed Flight Path</h4>
        <button @onclick='() => ExecuteDroneCommand("FixedPath1")'>Fixed Flight Path 1</button>
        <p></p>
        <button @onclick='() => ExecuteDroneCommand("FixedPath2")'>Fixed Flight Path 2</button>
    </div>
</div>
<p></p>
<h4>Manual Drone Controls</h4>
<button @onclick='() => ExecuteDroneCommand("armNtakeoff")'>Arm and Takeoff</button>
<button @onclick='() => ExecuteDroneCommand("landNdisarm")'>Land and Disarm</button>
<p></p>
<h4>Movement</h4>
<button @onclick='() => ExecuteDroneCommand("forward")'>↑ Move Forward</button>
<button @onclick='() => ExecuteDroneCommand("backward")'>↓ Move Backward</button>
<button @onclick='() => ExecuteDroneCommand("left")'>← Move Left</button>
<button @onclick='() => ExecuteDroneCommand("right")'>→ Move Right</button>

<p></p>
<p></p>
@code {
    private string gpsData = "N/A";
    private string speedData = "N/A";
    private string batteryData = "N/A";
    private string droneStatus = "Unknown";
    private string flightStatus = "Unknown";
    private string alertMessage = "";
    private string alertClass = "";
    private string videoFrame = "data:image/jpeg;base64, "; // Placeholder
    private int totalCollisions = 0;
    private int lastCollisionCount = 0; // Track previous collision count
    private DateTime? takeoffTime = null;  // Store when the drone took off
    private TimeSpan totalFlightTime = TimeSpan.Zero;  // Store elapsed flight time

    protected override void OnInitialized()
    {
        AirSimClient.OnFrameReceived += UpdateVideoFrame;
        AirSimClient.OnDataReceived += UpdateDroneData;
    }

    private void UpdateVideoFrame(byte[] frameData)
    {
        Logger.LogInformation("[DEBUG] Frame received, updating UI...");
        videoFrame = "data:image/jpeg;base64," + Convert.ToBase64String(frameData);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateDroneData(string data)
    {
        try
        {
            var values = data.Split(',');
            if (values.Length >= 7)  // Adjusted for new data structure
            {
                gpsData = $"{values[0]}, {values[1]}, {values[2]}";  // Show full GPS
                speedData = values[3] + " m/s";
                batteryData = values[4];
                droneStatus = values[5];  // Armed/Disarmed
                flightStatus = values[6]; // Flying/Landed
                // Collision Detection
                int newCollisions = int.TryParse(values[7], out int parsedValue) ? parsedValue : 0;
                if (newCollisions > 0)
                {
                    totalCollisions += newCollisions;  // Keep counting collisions
                }

                // Start counting flight time when taking off
                if (flightStatus == "Flying" && takeoffTime == null)
                {
                    takeoffTime = DateTime.Now;
                }
                // Stop counting when landed and calculate total time
                else if (flightStatus == "Landed" && takeoffTime != null)
                {
                    totalFlightTime += DateTime.Now - takeoffTime.Value;
                    takeoffTime = null; // Reset takeoff time
                }

                CheckForAlerts();
            }
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Failed to parse drone data: {ex.Message}");
        }
    }

    private void CheckForAlerts()
    {
        if (double.TryParse(batteryData.Replace("%", ""), out double batteryLevel) && batteryLevel < 20)
        {
            alertMessage = "⚠ Warning: Low Battery!";
            alertClass = "alert alert-danger";
        }
        else if (droneStatus == "Disarmed" && flightStatus == "Flying")
        {
            alertMessage = "⚠ Drone is disarmed while in the air!";
            alertClass = "alert alert-warning";
        }
        else if (totalCollisions > lastCollisionCount)
        {
            alertMessage = "🚨 Collision Detected!";
            alertClass = "alert alert-danger";
            lastCollisionCount = totalCollisions; // Update last recorded count
        }
        else
        {
            alertMessage = "";
            alertClass = "";
        }
    }

    private async Task ExecuteDroneCommand(string command)
    {
        await AirSimClient.MovementAsync(command);

    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        AirSimClient.OnFrameReceived -= UpdateVideoFrame;
    }
}